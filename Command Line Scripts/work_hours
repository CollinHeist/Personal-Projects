#!/usr/bin/env python3

import argparse       # Argument parsing on command line calls
from math import ceil # For 10th place hour-rounding

def generate_argument_parser() -> dict:
	ap = argparse.ArgumentParser()
	ap.add_argument('-s', '--start', required=True, type=str, help='Start Time (in 24:00 format)')
	ap.add_argument('-e', '--end', required=True, type=str, help='End Time (in 24:00 format)')
	ap.add_argument('-w', '--wage', required=False, default=25, type=float, help='Hourly wage (in USD)')
	args = vars(ap.parse_args())

	return args

def calculate_time(start: str, end: str) -> float:
	try:
		start_hour, start_minute = map(int, start.split(":"))
		end_hour, end_minute = map(int, end.split(":"))
	except ValueError:
		raise ValueError("Incorrect time entered.")

	start_time_float = (start_hour * 60.0) + start_minute
	end_time_float = (end_hour * 60.0) + end_minute

	if start_time_float > end_time_float:
		raise ValueError("End time must be after start time.")

	return ceil(round((end_time_float - start_time_float) / 60.0, 5) * 10.0) / 10.0
	
def calculate_pay(hours: float, hourly_pay: float) -> float:
	if type(hours) not in (float, int):
		raise ValueError("Invalid number of hours")

	return round(hours * hourly_pay, 3)

args = generate_argument_parser()
time = calculate_time(args['start'], args['end'])
pay = calculate_pay(time, args['wage'])

print (f"Worked a total of {time} hours - approximate pay is ${pay}.")
